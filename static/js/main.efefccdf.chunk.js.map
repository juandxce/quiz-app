{"version":3,"sources":["QuizApp/reducer.ts","QuizApp/components/pages/HomePage.tsx","QuizApp/components/Subcomponents/QuestionCard.tsx","utils/utils.ts","QuizApp/components/pages/QuizPage.tsx","QuizApp/components/pages/ResultsPage.tsx","QuizApp/QuizApp.tsx","QuizApp/index.ts","store/reducers.ts","api/Quiz.ts","api/index.ts","QuizApp/saga.ts","store/sagas.ts","store/index.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["initialState","userResponses","fetchingQuizSagaRequest","quizQuestions","currentStep","QuizAppSlice","createSlice","name","reducers","fetchQuizSagaRequest","state","setQuizQuestions","action","payload","map","el","question","DOMPurify","sanitize","setUserResponses","increaseCurrentStep","resetToInitialState","QuizAppActions","actions","QuizAppReducer","reducer","useStyles","makeStyles","spacer","margin","textAlign","btnTopSpace","marginTop","HomePage","history","classes","dispatch","useDispatch","useSelector","QuizApp","useEffect","length","className","Typography","variant","gutterBottom","Button","color","onClick","push","size","React","memo","questionCard","maxWidth","flexCenter","justifyContent","clearColor","CardMedia","height","QuestionCard","options","onAnswer","response","console","log","colors","Card","component","alt","image","title","CardContent","parse","CardActions","option","index","value","style","backgroundColor","fullWidth","shuffleArray","array","i","j","Math","floor","random","QuizPage","useState","cardFader","setCardFader","category","correct_answer","incorrect_answers","setTimeout","to","align","val","prevResponses","correct","incorrect","listItem","border","borderRadius","ResultsPage","correctAnswersArray","correctAnswersCount","reduce","prevVal","currVal","List","dense","questionOBJ","isCorrect","ListItem","ListItemText","primary","secondary","startIcon","quizPageWrapper","display","alignItems","overflow","flexDirection","App","exact","path","createRootReducer","combineReducers","a","fetch","resp","ok","Error","text","json","data","getQuizQuestions","QuizSaga","watchQuizSaga","retry","api","put","results","takeLatest","root","spawn","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","composeWithDevTools","applyMiddleware","window","run","rootSaga","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efefccdf.chunk.js","sourcesContent":["/* eslint-disable camelcase */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport DOMPurify from \"dompurify\";\n\ntype Question = {\n  category: string;\n  question: string;\n  type: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  correct_answer: string;\n};\n\nconst initialState = {\n  userResponses: [] as string[],\n  fetchingQuizSagaRequest: false,\n  quizQuestions: [] as Question[],\n  currentStep: 0,\n};\n\nconst QuizAppSlice = createSlice({\n  name: \"QuizApp\",\n  initialState,\n  reducers: {\n    fetchQuizSagaRequest(state) {\n      state.fetchingQuizSagaRequest = true;\n    },\n    setQuizQuestions(state, action: PayloadAction<Question[]>) {\n      state.fetchingQuizSagaRequest = false;\n      state.quizQuestions = action.payload.map((el) => {\n        el.question = DOMPurify.sanitize(el.question);\n        return el;\n      });\n    },\n    setUserResponses(state, action: PayloadAction<string[]>) {\n      state.userResponses = action.payload;\n    },\n    increaseCurrentStep(state) {\n      state.currentStep = state.currentStep + 1;\n    },\n    resetToInitialState(state) {\n      return initialState;\n    },\n  },\n});\n\nexport const QuizAppActions = QuizAppSlice.actions;\nexport const QuizAppReducer = QuizAppSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { QuizAppActions } from \"../../reducer\";\nimport { IState } from \"../../../store/reducers\";\nimport Fade from \"react-reveal/Fade\";\n\nconst useStyles = makeStyles({\n  spacer: {\n    margin: \"2vw auto\",\n    textAlign: \"center\",\n  },\n  btnTopSpace: { marginTop: \"2vw\" },\n});\n\nconst HomePage: React.FunctionComponent<RouteComponentProps> = ({\n  history,\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { fetchingQuizSagaRequest, quizQuestions } = useSelector(\n    (state: IState) => state.QuizApp\n  );\n\n  useEffect(() => {\n    if (fetchingQuizSagaRequest || quizQuestions.length) return;\n    dispatch(QuizAppActions.fetchQuizSagaRequest());\n  }, [dispatch, fetchingQuizSagaRequest, quizQuestions.length]);\n\n  return (\n    <Fade>\n      <div className={classes.spacer}>\n        <Typography variant=\"h3\" gutterBottom>Welcome to the Trivia Challenge!</Typography>\n        <Typography>\n          You will be presented with 10 True or False questions.\n        </Typography>\n        <Typography>Can you score 100%?</Typography>\n\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => {\n            history.push(\"/start-quiz\");\n          }}\n          size=\"large\"\n          className={classes.btnTopSpace}\n        >\n          Begin\n        </Button>\n      </div>\n    </Fade>\n  );\n};\n\nexport default React.memo(HomePage);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport parse from \"html-react-parser\";\n\nconst useStyles = makeStyles({\n  questionCard: {\n    maxWidth: \"80vw\",\n    textAlign: \"center\",\n    margin: \"0 auto\",\n  },\n  flexCenter: {\n    justifyContent: \"center\",\n  },\n  clearColor: { color: \"white\" },\n  CardMedia: { height: \"40vh\" },\n});\n\nexport type Option = {\n  color?: string;\n  value: string;\n};\n\nfunction QuestionCard({\n  question = \"\",\n  options = [],\n  onAnswer = (response) => {\n    console.log(\"response:\", response);\n  },\n}: {\n  category: string;\n  question: string;\n  options: Option[];\n  onAnswer: (response: string) => void;\n}) {\n  const classes = useStyles();\n\n  const colors = [\"#f50057\", \"#3f51b5\", \"orange\", \"pink\", \"red\"];\n\n  return (\n    <Card className={classes.questionCard}>\n      <CardMedia\n        component=\"img\"\n        alt=\"CoolCategoryImage\"\n        image=\"https://images.unsplash.com/photo-1583699998579-5872a2117151?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80\"\n        title=\"CoolCategoryImage\"\n        className={classes.CardMedia}\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n          {parse(question)}\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.flexCenter}>\n        {options.map((option, index) => (\n          <Button\n            key={index}\n            variant=\"contained\"\n            onClick={() => {\n              onAnswer(option.value);\n            }}\n            size=\"large\"\n            className={classes.clearColor}\n            style={{\n              backgroundColor: option.color || colors[index],\n            }}\n            fullWidth\n          >\n            {option.value}\n          </Button>\n        ))}\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default React.memo(QuestionCard);\n","export function shuffleArray(array: any[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { QuizAppActions } from \"../../reducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { IState } from \"../../../store/reducers\";\nimport QuestionCard from \"../Subcomponents/QuestionCard\";\nimport { Redirect } from \"react-router-dom\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Fade from \"react-reveal/Fade\";\nimport { shuffleArray } from \"../../../utils/utils\";\n\nconst useStyles = makeStyles({\n  spacer: {\n    margin: \"2vw auto\",\n    textAlign: \"center\",\n  },\n});\n\nconst QuizPage: React.FunctionComponent<RouteComponentProps> = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { fetchingQuizSagaRequest, currentStep, quizQuestions } = useSelector(\n    (state: IState) => state.QuizApp\n  );\n  const [userResponses, setUserResponses] = useState<string[]>([]);\n  const [cardFader, setCardFader] = useState(true);\n  const { category, question, correct_answer, incorrect_answers = [] } =\n    quizQuestions?.[currentStep] || {};\n\n  useEffect(() => {\n    if (fetchingQuizSagaRequest || quizQuestions.length) return;\n    dispatch(QuizAppActions.fetchQuizSagaRequest());\n  }, [dispatch, fetchingQuizSagaRequest, quizQuestions.length]);\n\n  const showCardFader = () => {\n    setTimeout(() => {\n      setCardFader(true);\n    }, 100);\n  };\n  useEffect(() => {\n    console.log(\"cardFader\", cardFader);\n    if (cardFader) return;\n    showCardFader();\n  }, [cardFader]);\n\n  if (currentStep && currentStep === quizQuestions.length) {\n    dispatch(QuizAppActions.setUserResponses(userResponses));\n    return <Redirect to=\"/results\" />;\n  }\n\n  const options = [\n    { value: correct_answer },\n    ...incorrect_answers.map((value) => ({ value })),\n  ];\n\n  return (\n    <div className={classes.spacer}>\n      {cardFader && (\n        <Fade>\n          <Typography gutterBottom variant=\"h4\" align=\"center\">\n            {category}\n          </Typography>\n          <QuestionCard\n            question={question}\n            category={category}\n            options={shuffleArray(options)}\n            onAnswer={(val) => {\n              setCardFader(false);\n              setUserResponses((prevResponses) => [...prevResponses, val]);\n              dispatch(QuizAppActions.increaseCurrentStep());\n            }}\n          />\n        </Fade>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(QuizPage);\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { IState } from \"../../../store/reducers\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Button from \"@material-ui/core/Button\";\nimport parse from \"html-react-parser\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport { QuizAppActions } from \"../../reducer\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Fade from \"react-reveal/Fade\";\n\nconst useStyles = makeStyles({\n  correct: {\n    backgroundColor: \"rgba(117, 201, 84, 0.15)\",\n  },\n  incorrect: {\n    backgroundColor: \"rgba(193, 66, 66, 0.15)\",\n  },\n  listItem: {\n    border: \"1px solid #888\",\n    margin: \"1vw 0\",\n    borderRadius: \"10px\",\n  },\n  spacer: {\n    margin: \"2vw auto\",\n    textAlign: \"center\",\n  },\n});\n\nconst ResultsPage: React.FunctionComponent<RouteComponentProps> = ({\n  history,\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { quizQuestions, userResponses } = useSelector(\n    (state: IState) => state.QuizApp\n  );\n\n  const correctAnswersArray: number[] = [];\n  const correctAnswersCount = userResponses.reduce(\n    (prevVal, currVal, index) => {\n      if (quizQuestions[index].correct_answer === currVal) {\n        correctAnswersArray[index] = prevVal + 1;\n        return prevVal + 1;\n      }\n      return prevVal;\n    },\n    0\n  );\n\n  return (\n    <Fade>\n      <div className={classes.spacer}>\n        {!!userResponses.length &&\n        userResponses.length === quizQuestions.length ? (\n          <>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              You Scored\n              <br />\n              {`${correctAnswersCount}/${quizQuestions.length}`}\n            </Typography>\n            <List dense>\n              {quizQuestions.map((questionOBJ, index) => {\n                const isCorrect =\n                  questionOBJ.correct_answer === userResponses[index];\n                return (\n                  <ListItem\n                    key={index}\n                    className={`${classes.listItem} ${\n                      isCorrect ? classes.correct : classes.incorrect\n                    }`}\n                  >\n                    <ListItemText\n                      primary={parse(questionOBJ.question)}\n                      secondary={\n                        isCorrect\n                          ? `Correct Answer number: ${correctAnswersArray[index]}`\n                          : `Correct answer: ${questionOBJ.correct_answer} - your answer: ${userResponses[index]}`\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n            </List>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"large\"\n              startIcon={<ReplayIcon />}\n              onClick={() => {\n                dispatch(QuizAppActions.resetToInitialState());\n                history.push(\"/\");\n              }}\n            >\n              Play Again?\n            </Button>\n          </>\n        ) : (\n          <>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              You haven't completed a quiz\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={() => {\n                history.push(\"/start-quiz\");\n              }}\n            >\n              Start playing\n            </Button>\n          </>\n        )}\n      </div>\n    </Fade>\n  );\n};\nexport default React.memo(ResultsPage);\n","import React from \"react\";\nimport HomePage from \"./components/pages/HomePage\";\nimport QuizPage from \"./components/pages/QuizPage\";\nimport ResultsPage from \"./components/pages/ResultsPage\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  quizPageWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n});\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={`App ${classes.quizPageWrapper}`}>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/start-quiz\" component={QuizPage} />\n        <Route path=\"/results\" component={ResultsPage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","import QuizApp from \"./QuizApp\"\nexport default QuizApp;","\nimport { QuizAppReducer } from '../QuizApp/reducer';\nimport { combineReducers } from 'redux';\n\nconst createRootReducer = combineReducers({\n  QuizApp: QuizAppReducer,\n});\nexport default createRootReducer;\nexport type IState = ReturnType<typeof createRootReducer>;\n","type QuizAnswerType = {\n  category: string;\n  type: string;\n  difficulty: string;\n  question: string;\n  correct_answer: \"True\" | \"False\";\n  incorrect_answers: [\"True\" | \"False\"];\n};\n\nasync function getQuizQuestions() {\n  const url =\n    \"https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean\";\n  const resp = await fetch(url);\n  if (!resp.ok) {\n    throw new Error(await resp.text());\n  }\n\n  const data: QuizAnswerType = await resp.json();\n  return data;\n}\n\nexport default { getQuizQuestions };\n","import quizAPI from './Quiz';\n\nexport default {quizAPI}","import { QuizAppActions } from \"./reducer\";\nimport { takeLatest, retry, put } from \"redux-saga/effects\";\n\nimport api from \"../api\";\n\nfunction* QuizSaga() {\n  const response = yield retry(5, 500, api.quizAPI.getQuizQuestions);\n  yield put(QuizAppActions.setQuizQuestions(response.results));\n}\n\nexport function* watchQuizSaga() {\n  yield takeLatest(QuizAppActions.fetchQuizSagaRequest, QuizSaga);\n}\n","import { spawn } from 'redux-saga/effects';\nimport { watchQuizSaga } from \"../QuizApp/saga\"\n\nexport default function* root() {\n  yield spawn(watchQuizSaga);\n}\n","// @ts-ignore\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst middlewares = [sagaMiddleware];\n\nexport const store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(...middlewares)) //...middlewares\n);\n\nwindow.store = store;\nsagaMiddleware.run(rootSaga);\n\ndeclare global {\n  interface Window {\n    store: typeof store;\n    mobileSupport?: {\n      onApplicationReady: () => void;\n    };\n  }\n}\n","import React from \"react\";\nimport QuizApp from \"./QuizApp\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" component={QuizApp} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./App.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}